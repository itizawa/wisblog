// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "metrics", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../../../packages/types/src/domains"
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  blogs           Blog[]
  publishArticles PublishArticle[]
  draftArticles   DraftArticle[]
  articles        Article[]

  @@map("users")
}

model Session {
  sid    String   @id
  sess   Json
  expire DateTime @db.Timestamptz(6)

  @@index([expire], name: "IDX_sessions_expire")
  @@map("sessions")
}

model Blog {
  id        String @id @default(uuid())
  /// @zod.string({ required_error: '名前を入力してください' }).max(255, { message: "名前は255文字未満で入力してください" })
  name      String
  /// @zod.string.min(3, { message: "サブドメインは3文字以上で入力してください" }).max(63, { message: 'サブドメインは63文字以下である必要があります' }).regex(/^[a-zA-Z0-9]+([-][a-zA-Z0-9]+)*$/, { message: 'サブドメインには英数字とハイフンのみが使用できます（ハイフンは先頭と末尾には使用できません）' })
  subDomain String @unique @map("sub_domain")

  ownerId String @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  publishArticles PublishArticle[]
  draftArticles   DraftArticle[]
  articles        Article[]

  @@map("blogs")
}

model PublishArticle {
  id    String @id @default(uuid())
  /// @zod.string({ required_error: '名前を入力してください' }).max(255, { message: "名前は255文字未満で入力してください" })
  title String
  body  String

  blogId String @map("blog_id")
  blog   Blog   @relation(fields: [blogId], references: [id])

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("publish_articles")
}

model DraftArticle {
  id    String @id @default(uuid())
  /// @zod.string({ required_error: '名前を入力してください' }).max(255, { message: "名前は255文字未満で入力してください" })
  title String
  body  String

  blogId String @map("blog_id")
  blog   Blog   @relation(fields: [blogId], references: [id])

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("draft_articles")
}

view Article {
  id    String @id
  title String
  body  String

  status Status

  blogId String @map("blog_id")
  blog   Blog   @relation(fields: [blogId], references: [id])

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @map("created_at") @db.Timestamptz()
  updatedAt DateTime @map("updated_at") @db.Timestamptz()

  @@map("articles")
}

enum Status {
  publish
  graft

  @@map("statuses")
}
